*ProjectConfig*		    Vim version 8.1		Last change: 30-sep-2018

Run a project specific Vim script when working with your project tree.

Allows you to load a Vim script when entering a project tree or every time you
edit a file from that tree.

It is similar to other "project settings" addons, but infers the project
directory from local `.vimrc` settings, not by scanning every path component for
several "marker" files (`.project`, `.root`, `.git`, ...), up to the file system root,
every time you |:edit| something.
================================================================================

						   	*ProjectConfig-install*
Installation~

Installation should be easy. The plugin should be found at:
  https://github.org/terminatorul/ProjectConfig

Depending on how you use Vim, you can choose one of the options below:

Use Vimball release~

Download the vimball release from Github (search for project
terminatorul/ProjectConfig, then click on Releases). Open the `.vmb` file
in Vim and run |:source| `%`

Use a Vim plugin manager~

Using a plugin manager for Vim like Vundle or Pathogen is recommended. For
Vundle you should add some lines similar to the following to your local `.vimrc`
file:
>
    call vundle#begin()

	#
	# .. other plugins you use with Vundle
	#

	Plugin 'terminatorul/ProjectConfig
    call vundle#end()
<
then run `:PluginInstall` command in Vim.

Manual commands~

Run in a console:
>
    cd ~/.vim
    git clone "https://github.com/terminatorul/ProjectConfig.git"
<
Open Vim and append the following line to your `~/.vimrc` file:
>
    set runtimepath-=~/.vim/ProjectConfig
<
================================================================================

Usage~

Two kinds of vimscript files can be associated with any project tree:
* a `project` script, that will be run the first time you `:cd ` inside the project
  directory in Vim, or the first time you `:edit` a file from the project tree
* a `files` script, that will be run every time you open/edit a file from the
  project tree

By default the `project` script has the same name as the project, with `.vim`
extension added, and is searched in the `~/.vim/project/` directory
(`~/vimfiles/project/` for Windows). The `files` script has the name of the project
with the suffix `.files.vim` (`_files.vim` for Windows).

						      *ProjectConfig#SetScript()*
						      *g:ProjectConfig_Directory*
						        *g:ProjectConfig_Project*
>
 call ProjectConfig#SetScript
	    \ ('Name', 'Path', 'ProjectScriptPath', 'FileScriptPath', KeepPWD)
 call ProjectConfig#SetScript('Name', 'Path')
 call ProjectConfig#SetScript('Path')
<

Associate a project tree with a project script and a file script. The only
required argument is the `Path`, other can be omitted. If not specified, the
default values are:
* the project `Name` is the last path component from `Path` the project script
* is `~/.vim/project/<Name>.vim` the file script is
* `~/.vim/project/<Name>.files.vim` if file exists, or no file
  script otherwise.
* the flag to keep current directory is false, that is the project script is
  always run from the project directory, after which the current directory is
  restored. Beware the file script is always run from the user current
  directory, which can well be outside the project!

The `~/.vim/` directory is used for Linux, `~/vimfiles` for Windows. The file
script for Linux has a default suffix of `.files.vim`, and `_files.vim` for
Windows.

Use this function in your local  `.vimrc` or `_vimrc`, once for every project
tree that you want to have setup scripts.

The `Path` and `Name` values given here will be passed to the associated scripts
when invoked, in the global variables `g:ProjectConfig_Directory` and
`g:ProjectConfig_Project`.

							         *:ProjectConfig*
							      *:ProjectConfigAdd*
>
 :ProjectConfig Name Path ProjectScript FilesScript
 :ProjectconfigAdd 'Name', 'Path', 'ProjectScript', 'FilesScript'
<

Same as the `ProjectConfig#SetScript` function above. But since these are Vim
commands, they are only available after the plugin has been loaded by Vim. That
is they are not available yet in the `.vimrc` file. Arguments other the `Path` are
optional, like they are for the function.

						       *ProjectConfig#FindLoad()*
							    *:ProjectConfigEnter*
							     *:ProjectConfigOpen*
>
 :call ProjectConfig#FindLoad('Name')
 :ProjectConfigEnter Name
 :ProjectConfigOpen 'Name'
<

Open the named project tree. Uses `:NERDTreeCWD` to open the directory if
available. The name must be a project from a previous call to
`ProjectConfig#SetScript()` function or `:ProjectConfig`/`:ProjectConfigAdd`
command. When the project tree is opened, the `project` script will be
triggered (`:source`d), if the project has not been open before in the same Vim
session.

						     *ProjectConfig#Completion()*
						             *:ProjectConfigList*
>
 :call ProjectConfig#Completion(v:null, v:null, v:null)
 :ProjectConfigList
<
Return/display a list with names of all projects from previous calls to
`ProjectConfig#SetScript()` function, or previous uses of `:ProjectConfig` or
`:ProjectConfigAdd` command.

================================================================================
Configuration~

			                    *g:ProjectConfig_NERDTreeIntegration*
>
 g:ProjectConfig_NERDTreeIntegration
<

By default ProjectConfig knows when you use NERDTree plugin to open a project
directory, and will trigger the project script (if needed) when that happens.
Set this variable to ||v:false| to prevent integration with NERDTree plugin.

					           *g:ProjectConfig_PluginLoaded*
>
 g:ProjectConfig_PluginLoaded
<
Set to |v:true| after the plugin loads. You can set this to |v:true| in your
local .`vimrc` file to prevent the plugin from loading (that is, to disable
ProjectConfig plugin, but still keep it installed). As expected, autoload
functions like |ProjectConfig#SetScript()| above will still be available. What
will be disabled are the Vim commands |:ProjectConfig|, |:ProjectConfigAdd|,
|:ProjectConfigEnter|, |:ProjectConfigOpen|, |:ProjectConfigList|.

================================================================================
ProjectConfig API~
							       *ProjectConfig-API*

ProjectConfig plugin exposes a small set of functions, intended for use by the
project script, or the files script. Currently this API is intended to support
generation of tag files from the project source files, in order to enable source
code browsing in Vim.

The project script should create function references for the frequently used
functions exposed here, for example:
>
 :let s:Join_Path = funcref('g:ProjectConfig_JoinPath')
>
The above is an easy way to make the function name shorter.

						  *ProjectConfig_CleanPathOption*
>
 :let g:ProjectConfig_CleanPathOption = v:true
<
When true (the default), remove the current directory from Vim 'path' option.
The current directory is included by default in the 'path' option using an empty
string '' as a directory name. But for non-trivial projects it is usually the
wrong directory to have on the include path.

Set to v:false to disable this behavior and keep the current directory in the
include path.

					       *ProjectConfig_DirectorySeparator*
>
 g:ProjectConfig_DirectorySeparator
 :let s:sep = g:ProjectConfig_DirectorySeparator
<
The separator character, to be used between path components of the files system
path (like an absolute directory name or file name). The value is set based on
the availability of the &shellslash Vim option. Should be backslash on
Windows system and (forward) slash otherwise.

						       *ProjectConfig_JoinPath()*
>
 g:ProjectConfig_JoinPath(...)
>
Create a filesystem path from a list of path components, using the slash or
backslash character, as expected for the curent system ('\' for Windows, '/'
otherwise). Beware the `:autocmd` Vim command always expects (forward) slash
characters for the buffer name pattern.

						*ProjectConfig_ParsePathOption()*
>
 g:ProjectConfig_ParsePathOption(value)
>
Parse the string value of a Vim list option, given by value, into a list object,
by splitting the string at comma ',' characters that are not escaped with a
backslash. Escape sequences for special characters ('\ ', '\\', '\,') are
procesed and replaced with the escaped character directly, so "C:\Program\ Files\
(x86)" in the string value is parsed back into "C:\Program Files (x86)".

							 *ProjectConfig_ShowPath*
>
 g:ProjectConfig_ShowPath(value = v:none)
>
Utility function to show the value of a path list or file list Vim option
('path', 'runtimepath', 'tags', 'directory') with one entry per line. Add a new
Vim command for this function like this:
>
  command -nargs=? -complete=expression ShowPath
	\ call g:ProjectConfig_ShowPath(<args>)

The default is to show value for the local 'path' option if set, or the global
option otherwise. You can show some other option by passing the option value,
like for exampl `&g:tags`, as a command argument.

						    *ProjectConfig_ListCompare()*
>
 function g:ProjectConfig_ListCompare(list1, list2)
>
>
Utility function to compare to Vim lists element by element, and return -1, 0,
or 1 to indicate list1 is less, equal, or greater then list2.

					       *ProjectConfig_ListAppendUnique()*
>
 function g:ProjectConfig_ListAppendUnique(list1, list2)
>
>
Utility function to append to list1 all elements from list2 that do not already
exist in list1.

						*ProjectConfig_DefaultSDKVersion*
>
 const g:ProjectConfig_DefaultSDKVersion =
	    \#{
	    \	VS:  #{ Release: '*', Product: '*', Tools_Version: '*' },
	    \	SDK: #{ Platform_Version: '[0-9]*', Version: '*' }
	    \ }
>

Dictionary with the default values and with the expected keys for
`g:ProjectConfig_MS_SDK_UCRT_Module()`. Users can declare a similirar dictionary
to call this function, and can use the desired values for Visual Studio Release
(e.g. 2019, 2022, ...), Product ('Community', 'Professional', 'Enterprise'),
toolset version, Windows SDK version, etc.

					     *ProjectConfig_MS_SDK_UCRT_Module()*
>
 g:ProjectConfig_MS_SDK_UCRT_Module(version = g:ProjectConfig_DefaultSDKVersion)
>
Create a project module with the expected include files and the expected ctags
options to use for running ctags on Windows SDK and Visual C++ (with standard
C++ libary). The Windows Universal CRT (C Run-Time library) is included in the
Windows SDK from Microsoft.
                                                          *ProjectConfig_Modules*
>
 let g:ProjectConfig_Modules = { }
>
Internal dictionary with project configuration data (list of source directories,
include directories, ctags options, cscope options) for all modules for all
projects. Included for exposition only, should not be modified directly. Instead
use the other functions described here.

						   *ProjectConfig_Tags_Directory*
>
 g:ProjectConfig_Tags_Directory = '.tags'
>
Default subdirectory, within the current project, to hold tag files for the
project modules. Modules marked external will also generate tag files in this
subdirectory by default. Each module can change the location of the tags file
for the module by setting the 'tags' key.

						 *ProjectConfig_CScope_Directory*
>
 g:ProjectConfig_CScope = '.cscope'
>
Default subdirectory, within the current project, to hold `cscope` database
files for the project modules. Modules marked external will also generate
cscope database files in this subdirectory by default. Each module can change
the location of the file for the module by setting the 'cscope' key.

							*ProjectConfig_AddModule*
>
 g:ProjectConfig_AddModule(mod)
>
Create and add a new project module to the module list. A project module is
given by the argument `mod7 and is a dictionary with the following keys:

  - "name" (string) name of the module
  - "dir" (string or string list) for one (or more) base directories for the
    module
  - "src" (string or string list) for source directories
  - "inc" (string or string list) for include directories
  - "tags" (string) for the name of the tags file for the modules
  - "ctags_args" (string or string list) for extra arguments to ctags command
  - "cscope" (dictionary) cscope configuration for the module, or v:null to
    disable cscope database for this module.
      - "db" (string) name of the database file. by default it is
	cscope.module_name.out
      - "build_args" (string or string list) extra arguments to cscope command
	for generationg the database
      - "lookup_args" (string or string list) extra arguments to cscope command
	for using the database to find symbols
      - "glob" (string or string list) glob()-like filter for source files
	that should go into the cscope database, applied to the directories given
	in "src" and "inc" entries.
      - "regexp" (string or string list) regexp filter for source files
	that should go into the cscope database, applied to the directories given
	in "src" and "inc" entries.
  - "deps" (string or string list) for a list of dependency module names.
    Dependency modules should be added before they are used.
  - "external" (boolean) to indicate a module that represents external libraries.
    These are configured last on the 'path' and 'tags' options, and after first
    build they do not need to regenerate the tags by default.

For any of the above entries that can be a string or a list, this function will
convert a string to a one-element list as needed.

The project config script (`ProjectConfig#SetScript`) should call this function
to create and add the modules for the current project, according to the project
settings, build options, external libraries, etc.

						  *ProjectConfig_CTagsCxxOptions*
>
 g:ProjectConfig_CTagsCxxOptions
>
A set of default options for external ctags command, that is suitable for
parsing C and C++ source files. These default command line options can help C
and C++ developers with code browsing, since the default behavior of the ctags
command is rather conservative and limited, and most developers can benefit from
extra ctags options on the command line. Using this value is optional, but it
can help users who do not want to go into the details of the ctags command line
options.

						    *ProjectConfig_ShellEscape()*
>
 g:ProjectConfig_ShellEscape(arg)
>
Simple utility function, based on Vim `shellesscape()` function, to escape a
command line argument for use with the shell. It will only call `shellescape()`
if the argument includes spaces or special characters, and for Windows also
takes care of a special case when quoting "C:\Program Files\" for example
actually results in the closing quote being escaped by the backslash character,
so it is not actually a closing quote. So instead, the function will return the
argument escaped as "C:\Program Files"\.

						 *ProjectConfig_SetConfigEntry()*
>
 g:ProjectConfig_SetConfigEntry(name, value)
>
Sets configuration information for the current project, to be used later by the
API functions. Currently the only configuration information is "ctags_args",
with a list of additional arguments for ctags command, to be used for all the
modules in the current project.

					       *ProjectConfig_AddModuleAutocmd()*
>
 g:ProjectConfig_AddModuleAutocmd(module, command, pattern = [ ])
>
Sets up Vim autocommands to be executed when files in the given module are
opened.

If pattern is non-empty, it is used instead of the module source directories to
select files for which to apply the autocommands.

						     *ProjectConfig_GCC_compiler*
>
 g:ProjectConfig_GCC_compiler
>
Name of the GCC compiler executable and any arguments for the compiler command
line, by default [ 'gcc' ]. ProjectConfig queries this compiler by default for
the list of default include directories and the list of pre-defined macro
definitions.

						 *ProjectConfig_GCC_ShowSpecArgs*
>
 g:ProjectConfig_GCC_ShowSpecArgs
>
List of arguments for GNU compiler to output the default include directores and
the pre-defined macro definitions. By default these arguments are
[ '-v', '-dM', '-E' ], followed by [ '-x', '-c' ] or [ '-x', 'c++' ] to
select `C` or `C++` language.

						 *ProjectConfig_Read_gcc_specs()*
>
 g:ProjectConfig_Read_gcc_specs
	\ (
	\   language      = 'c',
	\   compiler_exe  = g:ProjectConfig_GCC_compiler,
	\   compiler_args = [ ]
	\ )
>
Queries the given compiler for the default include directories and the
pre-defined macro defintions, for the given language.

The compiler must be based on gcc (the GNU Compilers Collection), and the
language should be 'c' or 'c++'. The command line arguments given in
`g:ProjectConfig_GCC_ShowSpecArgs` are used on the compiler command line,
together with the options in a:compiler_args. The output is parsed line-by-line
to identify the '#define' lines and the include directories.

						      *ProjectConfig_BuildTags()*
>
 g:ProjectConfig_BuildTags(project, module, ...)
>
Invoke ctags command using the shell, to generate tags for the given modules
(plus dependency modules) from the given project. The modules must be already
added to the project configuration by calling `ProjectConfig_AddModule`. The tag
files for modules marked external, that are already generated, will not be
regenerated.  Non-external modules will regenerate their tags.

						   *ProjectConfig_BuildAllTags()*
>
 g:ProjectConfig_BuildAllTags(project, module, ...)
>
Invoke ctags command, using the shell, to generate tag files for given modules
(plus dependency modules) from the specified project. All modules, both marked
external and not external, will regenerate the tag files.

					     *ProjectConfig_EnableReTagCommand()*
>
 g:ProjectConfig_EnableReTagCommand(module, ...)
>
Create new Vim `:command`s, based on the current project name in
`g:ProjectConfig_Project`, of the form:
  :command ReTagCurrentProjectName
  :command ReTagCurrentProjectNameAll
that will invoke the above functions `g:ProjectConfig_BuildTags` as needed to
regenerate tag files for the current project (Replace CurrentProjectName above
with the name of the current project, given in `g:ProjectConfig_Project`).

						  *ProjectConfig_EnableVimTags()*
>
 g:ProjectConfig_EnableVimTags(module, ...)
>
Setup the 'tags' and 'path' options in Vim to include the tag files and the
include directories for the given project modules, plus any dependency modules,
and takes care to set up each module according to the the module base directory
and source directories.  The modules should be added with
`g:ProjectConfig_AddModule()` before this function is used.

This should be about the last call in a project configuration script.

 vim:ft=help:tw=80:ts=8:
